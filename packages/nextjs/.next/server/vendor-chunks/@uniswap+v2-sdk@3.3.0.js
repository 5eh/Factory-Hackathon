"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@uniswap+v2-sdk@3.3.0";
exports.ids = ["vendor-chunks/@uniswap+v2-sdk@3.3.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@uniswap+v2-sdk@3.3.0/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@uniswap+v2-sdk@3.3.0/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FACTORY_ADDRESS_MAP: () => (/* binding */ FACTORY_ADDRESS_MAP),\n/* harmony export */   INIT_CODE_HASH: () => (/* binding */ INIT_CODE_HASH),\n/* harmony export */   InsufficientInputAmountError: () => (/* binding */ InsufficientInputAmountError),\n/* harmony export */   InsufficientReservesError: () => (/* binding */ InsufficientReservesError),\n/* harmony export */   MINIMUM_LIQUIDITY: () => (/* binding */ MINIMUM_LIQUIDITY),\n/* harmony export */   Pair: () => (/* binding */ Pair),\n/* harmony export */   Route: () => (/* binding */ Route),\n/* harmony export */   Router: () => (/* binding */ Router),\n/* harmony export */   Trade: () => (/* binding */ Trade),\n/* harmony export */   computePairAddress: () => (/* binding */ computePairAddress),\n/* harmony export */   inputOutputComparator: () => (/* binding */ inputOutputComparator),\n/* harmony export */   tradeComparator: () => (/* binding */ tradeComparator)\n/* harmony export */ });\n/* harmony import */ var _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uniswap/sdk-core */ \"(ssr)/./node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js\");\n/* harmony import */ var jsbi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsbi */ \"(ssr)/./node_modules/.pnpm/jsbi@3.2.5/node_modules/jsbi/dist/jsbi.mjs\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tiny-invariant */ \"(ssr)/./node_modules/.pnpm/tiny-invariant@1.3.3/node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var _ethersproject_solidity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/solidity */ \"(ssr)/./node_modules/.pnpm/@ethersproject+solidity@5.7.0/node_modules/@ethersproject/solidity/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n\n\n\n\n\n\n\nvar FACTORY_ADDRESS_MAP = {\n  // Mainnet\n  1: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  // Ropsten\n  3: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  // Goerli\n  5: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  // Optimism\n  10: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  // Arbitrum\n  42161: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  // Avalanche\n  43114: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  // Base\n  8453: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  // BNB\n  56: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  // Polygon\n  137: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C'\n};\nvar INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(0);\nvar ONE = /*#__PURE__*/jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(1);\nvar FIVE = /*#__PURE__*/jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(5);\nvar _997 = /*#__PURE__*/jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(997);\nvar _1000 = /*#__PURE__*/jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(1000);\nvar BASIS_POINTS = /*#__PURE__*/jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(10000);\nvar ZERO_PERCENT = /*#__PURE__*/new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Percent(ZERO);\nvar ONE_HUNDRED_PERCENT = /*#__PURE__*/new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Percent(ONE);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\n// see https://stackoverflow.com/a/41102306\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar computePairAddress = function computePairAddress(_ref) {\n  var factoryAddress = _ref.factoryAddress,\n      tokenA = _ref.tokenA,\n      tokenB = _ref.tokenB;\n\n  var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],\n      token0 = _ref2[0],\n      token1 = _ref2[1]; // does safety checks\n\n\n  return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_3__.getCreate2Address)(factoryAddress, (0,_ethersproject_solidity__WEBPACK_IMPORTED_MODULE_4__.keccak256)(['bytes'], [(0,_ethersproject_solidity__WEBPACK_IMPORTED_MODULE_4__.pack)(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);\n};\nvar Pair = /*#__PURE__*/function () {\n  function Pair(currencyAmountA, tokenAmountB) {\n    var tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n    ? [currencyAmountA, tokenAmountB] : [tokenAmountB, currencyAmountA];\n    this.liquidityToken = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Token(tokenAmounts[0].currency.chainId, Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS_MAP[tokenA.chainId],\n      tokenA: tokenA,\n      tokenB: tokenB\n    });\n  }\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\n  ;\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\n  ;\n\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'TOKEN') : 0 : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\n  ;\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'TOKEN') : 0 : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  }\n  /**\r\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\r\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\r\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\r\n   *\r\n   * With fee-on-transfer tax, intuitively it's just:\r\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\r\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\r\n   * where amountInWithFee is the amountIn after taking out the LP fees\r\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\r\n   *\r\n   * But we are illustrating the math deduction below to ensure that's the case.\r\n   *\r\n   * before swap A * B = K where A = reserveIn B = reserveOut\r\n   *\r\n   * after swap A' * B' = K where only k is a constant value\r\n   *\r\n   * getAmountOut\r\n   *\r\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\r\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\r\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\r\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\r\n   *             /\r\n   *             (1 - amountOut.buyFeesBips / 10000)\r\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\r\n   *             /\r\n   *             (1 - amountOut.buyFeesBips / 10000)\r\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\r\n   *             /\r\n   *             (1 - amountOut.buyFeesBips / 10000)\r\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\r\n   *             /\r\n   *             (1 - amountOut.buyFeesBips / 10000)\r\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\r\n   *                                                    /\r\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\r\n   *\r\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\r\n   *                       /\r\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\r\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\r\n   *                       /\r\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\r\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\r\n   *                       /\r\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\r\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\r\n   *                       /\r\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\r\n   *                     = (B * inputAmountWithFeeAndTax)\r\n   *                       /\r\n   *                       (1000 * A + inputAmountWithFeeAndTax)\r\n   *\r\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\r\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\r\n   *\r\n   * @param inputAmount\r\n   * @param calculateFotFees\r\n   */\n  ;\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount, calculateFotFees) {\n    if (calculateFotFees === void 0) {\n      calculateFotFees = false;\n    }\n\n    !this.involvesToken(inputAmount.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'TOKEN') : 0 : void 0;\n\n    if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(this.reserve0.quotient, ZERO) || jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.currency);\n    var outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n    var percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT;\n    var inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT) ? _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(inputAmount.currency, percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n    ) : inputAmount;\n    var inputAmountWithFeeAndAfterTax = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(inputAmountAfterTax.quotient, _997);\n    var numerator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient);\n    var denominator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax);\n    var outputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    );\n\n    if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    var percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT;\n    var outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT) ? _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(outputAmount.currency, outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n    ) : outputAmount;\n\n    if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmountAfterTax, new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax))];\n  }\n  /**\r\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\r\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\r\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\r\n   *\r\n   * With fee-on-transfer fees, intuitively it's just:\r\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\r\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\r\n   *\r\n   * But we are illustrating the math deduction below to ensure that's the case.\r\n   *\r\n   * before swap A * B = K where A = reserveIn B = reserveOut\r\n   *\r\n   * after swap A' * B' = K where only k is a constant value\r\n   *\r\n   * getAmountIn\r\n   *\r\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\r\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\r\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\r\n   *            /\r\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\r\n   *            /\r\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\r\n   *            /\r\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\r\n   *            /\r\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\r\n   *            /\r\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *\r\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\r\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\r\n   *\r\n   * @param outputAmount\r\n   */\n  ;\n\n  _proto.getInputAmount = function getInputAmount(outputAmount, calculateFotFees) {\n    if (calculateFotFees === void 0) {\n      calculateFotFees = false;\n    }\n\n    !this.involvesToken(outputAmount.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'TOKEN') : 0 : void 0;\n    var percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT;\n    var outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT) ? _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(outputAmount.currency, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n    ) : outputAmount;\n\n    if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(this.reserve0.quotient, ZERO) || jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(this.reserve1.quotient, ZERO) || jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) || jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.currency);\n    var inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000);\n    var denominator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997);\n    var inputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    );\n    var percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT;\n    var inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT) ? _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(inputAmount.currency, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n    ) : inputAmount;\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.currency.equals(this.liquidityToken) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'LIQUIDITY') : 0 : void 0;\n    var tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'TOKEN') : 0 : void 0;\n    var liquidity;\n\n    if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(totalSupply.quotient, ZERO)) {\n      liquidity = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract((0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sqrt)(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient);\n      var amount1 = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient);\n      liquidity = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'TOKEN') : 0 : void 0;\n    !totalSupply.currency.equals(this.liquidityToken) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'TOTAL_SUPPLY') : 0 : void 0;\n    !liquidity.currency.equals(this.liquidityToken) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'LIQUIDITY') : 0 : void 0;\n    !jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lessThanOrEqual(liquidity.quotient, totalSupply.quotient) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'LIQUIDITY') : 0 : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'K_LAST') : 0 : void 0;\n      var kLastParsed = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(kLast);\n\n      if (!jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(kLastParsed, ZERO)) {\n        var rootK = (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sqrt)(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(this.reserve0.quotient, this.reserve1.quotient));\n        var rootKLast = (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sqrt)(kLastParsed);\n\n        if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].greaterThan(rootK, rootKLast)) {\n          var numerator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(totalSupply.quotient, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(rootK, rootKLast));\n          var denominator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(token, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient));\n  };\n\n  _proto.derivePercentAfterSellFees = function derivePercentAfterSellFees(inputAmount) {\n    var sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency) ? this.token0.wrapped.sellFeeBps : this.token1.wrapped.sellFeeBps;\n\n    if (sellFeeBips != null && sellFeeBips.gt(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__.BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Percent(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(sellFeeBips)).divide(BASIS_POINTS));\n    } else {\n      return ZERO_PERCENT;\n    }\n  };\n\n  _proto.derivePercentAfterBuyFees = function derivePercentAfterBuyFees(outputAmount) {\n    var buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency) ? this.token0.wrapped.buyFeeBps : this.token1.wrapped.buyFeeBps;\n\n    if (buyFeeBps != null && buyFeeBps.gt(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__.BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Percent(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(buyFeeBps)).divide(BASIS_POINTS));\n    } else {\n      return ZERO_PERCENT;\n    }\n  };\n\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      var result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\n      return new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.token0, this.token1, result.denominator, result.numerator);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      var result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\n      return new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.token1, this.token0, result.denominator, result.numerator);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].currency;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].currency;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    this._midPrice = null;\n    !(pairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'PAIRS') : 0 : void 0;\n    var chainId = pairs[0].chainId;\n    !pairs.every(function (pair) {\n      return pair.chainId === chainId;\n    }) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'CHAIN_IDS') : 0 : void 0;\n    var wrappedInput = input.wrapped;\n    !pairs[0].involvesToken(wrappedInput) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'INPUT') : 0 : void 0;\n    !(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'OUTPUT') : 0 : void 0;\n    var path = [wrappedInput];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'PATH') : 0 : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.input = input;\n    this.output = output;\n  }\n\n  _createClass(Route, [{\n    key: \"midPrice\",\n    get: function get() {\n      if (this._midPrice !== null) return this._midPrice;\n      var prices = [];\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.pairs.entries()), _step2; !(_step2 = _iterator2()).done;) {\n        var _step2$value = _step2.value,\n            i = _step2$value[0],\n            pair = _step2$value[1];\n        prices.push(this.path[i].equals(pair.token0) ? new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient) : new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient));\n      }\n\n      var reduced = prices.slice(1).reduce(function (accumulator, currentValue) {\n        return accumulator.multiply(currentValue);\n      }, prices[0]);\n      return this._midPrice = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.input, this.output, reduced.denominator, reduced.numerator);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}();\n\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !a.inputAmount.currency.equals(b.inputAmount.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'INPUT_CURRENCY') : 0 : void 0;\n  !a.outputAmount.currency.equals(b.outputAmount.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'OUTPUT_CURRENCY') : 0 : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    this.route = route;\n    this.tradeType = tradeType;\n    var tokenAmounts = new Array(route.path.length);\n\n    if (tradeType === _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT) {\n      !amount.currency.equals(route.input) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'INPUT') : 0 : void 0;\n      tokenAmounts[0] = amount.wrapped;\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(tokenAmounts[i]),\n            outputAmount = _pair$getOutputAmount[0];\n\n        tokenAmounts[i + 1] = outputAmount;\n      }\n\n      this.inputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator);\n      this.outputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromFractionalAmount(route.output, tokenAmounts[tokenAmounts.length - 1].numerator, tokenAmounts[tokenAmounts.length - 1].denominator);\n    } else {\n      !amount.currency.equals(route.output) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'OUTPUT') : 0 : void 0;\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped;\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(tokenAmounts[_i]),\n            inputAmount = _pair$getInputAmount[0];\n\n        tokenAmounts[_i - 1] = inputAmount;\n      }\n\n      this.inputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator);\n      this.outputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator);\n    }\n\n    this.executionPrice = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.quotient, this.outputAmount.quotient);\n    this.priceImpact = (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.computePriceImpact)(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT);\n  }\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\n  ;\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_OUTPUT);\n  }\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'SLIPPAGE_TOLERANCE') : 0 : void 0;\n\n    if (this.tradeType === _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.quotient).quotient;\n      return _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut);\n    }\n  }\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'SLIPPAGE_TOLERANCE') : 0 : void 0;\n\n    if (this.tradeType === _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient).quotient;\n      return _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, nextAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (nextAmountIn === void 0) {\n      nextAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'PAIRS') : 0 : void 0;\n    !(maxHops > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'MAX_HOPS') : 0 : void 0;\n    !(currencyAmountIn === nextAmountIn || currentPairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'INVALID_RECURSION') : 0 : void 0;\n    var amountIn = nextAmountIn.wrapped;\n    var tokenOut = currencyOut.wrapped;\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        ;\n\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.currency.equals(tokenOut)) {\n        (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sortedInsert)(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), currencyAmountIn.currency, currencyOut), currencyAmountIn, _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, currencyAmountIn, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), amountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  }\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\n  ;\n\n  _proto.worstExecutionPrice = function worstExecutionPrice(slippageTolerance) {\n    return new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.inputAmount.currency, this.outputAmount.currency, this.maximumAmountIn(slippageTolerance).quotient, this.minimumAmountOut(slippageTolerance).quotient);\n  }\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, nextAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (nextAmountOut === void 0) {\n      nextAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'PAIRS') : 0 : void 0;\n    !(maxHops > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'MAX_HOPS') : 0 : void 0;\n    !(currencyAmountOut === nextAmountOut || currentPairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'INVALID_RECURSION') : 0 : void 0;\n    var amountOut = nextAmountOut.wrapped;\n    var tokenIn = currencyIn.wrapped;\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        ;\n\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.currency.equals(tokenIn)) {\n        (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sortedInsert)(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, currencyAmountOut.currency), currencyAmountOut, _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, currencyAmountOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), amountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.quotient.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency.isNative;\n    var etherOut = trade.outputAmount.currency.isNative; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'ETHER_IN_OUT') : 0 : void 0;\n    !(!('ttl' in options) || options.ttl > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'TTL') : 0 : void 0;\n    var to = (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.validateAndParseAddress)(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = 'ttl' in options ? \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : \"0x\" + options.deadline.toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, 'EXACT_OUT_FOT') : 0 : void 0;\n\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\n\n//# sourceMappingURL=v2-sdk.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@uniswap+v2-sdk@3.3.0/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js\n");

/***/ })

};
;